// Generated by CoffeeScript 1.6.2
(function() {
  var Vimmers, vimmers,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Vimmers = (function() {
    Vimmers.FRIENDSHIPS_LOOKUP_URL = 'https://api.twitter.com/1.1/friendships/lookup.json';

    Vimmers.MAX_NAME_COUNT_PER_REQUEST = 100;

    Vimmers.EXPLANATION_MARK = '●';

    Vimmers.prototype.status = {
      both: {
        className: 'status-both',
        count: 0
      },
      following: {
        className: 'status-following',
        count: 0
      },
      followed: {
        clssName: 'status-followed',
        count: 0
      },
      none: {
        className: 'status-none',
        count: 0
      }
    };

    Vimmers.prototype.fetchCount = 0;

    Vimmers.prototype.friendships = null;

    Vimmers.prototype.persons = null;

    function Vimmers() {
      console.log('Run Vimmers.');
      this.addEventListeners();
    }

    Vimmers.prototype.addEventListeners = function() {
      var _this = this;

      document.getElementById('vimmers-showall').addEventListener('click', function(event) {
        setTimeout(function() {
          _this.init();
        }, 1 * 1000);
      }, false);
    };

    Vimmers.prototype.init = function() {
      var names, namesList, _i, _len;

      this.persons = document.querySelectorAll('.persons .person');
      console.log("Total vimmers: " + this.persons.length);
      namesList = this.getScreenNmaesList();
      for (_i = 0, _len = namesList.length; _i < _len; _i++) {
        names = namesList[_i];
        this.fetchFollowStatus(names);
      }
    };

    Vimmers.prototype.getScreenNmaesList = function() {
      var name, names, namesList, person, _i, _len, _ref;

      namesList = [];
      names = [];
      namesList.push(names);
      _ref = this.persons;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        person = _ref[_i];
        if (names.length >= Vimmers.MAX_NAME_COUNT_PER_REQUEST) {
          names = [];
          namesList.push(names);
        }
        name = this.getScreenNmae(person);
        if (!name) {
          continue;
        }
        names.push(name);
      }
      return namesList;
    };

    Vimmers.prototype.getScreenNmae = function(person) {
      var href, _ref, _ref1;

      href = (_ref = person.querySelectorAll('.link a')[0]) != null ? _ref.getAttribute('href') : void 0;
      return (_ref1 = href.match(/twitter\.com\/(.*)/)) != null ? _ref1[1] : void 0;
    };

    Vimmers.prototype.fetchFollowStatus = function(screenNames) {
      var request, url,
        _this = this;

      this.fetchCount += 1;
      url = Vimmers.FRIENDSHIPS_LOOKUP_URL;
      request = {
        method: 'GET',
        parameters: {
          screen_name: screenNames.join(',')
        }
      };
      chrome.extension.sendRequest({
        'target': 'twitter',
        'action': 'sendSignedRequest',
        'args': [url, request]
      }, function(response) {
        var friendship, _i, _len, _ref;

        console.log('Follow status: ', response);
        _this.fetchCount -= 1;
        if (!response.res) {
          console.log('Fetch follow status: no results.');
          return;
        }
        _this.friendships || (_this.friendships = {});
        _ref = response.res;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          friendship = _ref[_i];
          _this.friendships[friendship.screen_name] = friendship;
        }
        if (_this.fetchCount) {
          return;
        }
        _this.renderFollowStatus();
        return _this.renderExplanation();
      });
    };

    Vimmers.prototype.renderFollowStatus = function() {
      var className, connections, friendship, isFollowed, isFollowing, name, person, _i, _len, _ref;

      _ref = this.persons;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        person = _ref[_i];
        name = this.getScreenNmae(person);
        if (!name) {
          continue;
        }
        friendship = this.friendships[name];
        if (!friendship) {
          console.error("Unknown friendship: " + name);
          continue;
        }
        connections = friendship.connections;
        isFollowing = __indexOf.call(connections, 'following') >= 0;
        isFollowed = __indexOf.call(connections, 'followed_by') >= 0;
        className = this.updateStatus(isFollowing, isFollowed);
        person.className += " " + className;
      }
    };

    Vimmers.prototype.updateStatus = function(isFollowing, isFollowed) {
      var className;

      className = null;
      if (isFollowing && isFollowed) {
        this.status.both.count += 1;
        className = this.status.both.className;
      } else if (isFollowing) {
        this.status.following.count += 1;
        className = this.status.following.className;
      } else if (isFollowed) {
        this.status.followed.count += 1;
        className = this.status.followed.className;
      } else {
        this.status.none.count += 1;
        className = this.status.none.className;
      }
      return className;
    };

    Vimmers.prototype.renderExplanation = function() {
      var bothExp, div, followedExp, followingExp, parent, pos, total;

      total = "<p>Total: " + this.persons.length + "</p>";
      followingExp = ("<p><span>" + Vimmers.EXPLANATION_MARK + "</span>") + (" : Following only (" + this.status.following.count + ")</p>");
      followedExp = ("<p><span>" + Vimmers.EXPLANATION_MARK + "</span>") + (" : Followed only (" + this.status.followed.count + ")</p>");
      bothExp = ("<p><span>" + Vimmers.EXPLANATION_MARK + "</span>") + (" : Both (" + this.status.both.count + ")</p>");
      div = document.getElementById('status-explanation');
      if (!div) {
        div = document.createElement('div');
        div.id = 'status-explanation';
        pos = document.querySelector('.vimmers-controls');
        parent = pos.parentNode;
        parent.insertBefore(div, pos);
        div = document.getElementById('status-explanation');
      }
      div.innerHTML = total + followingExp + followedExp + bothExp;
    };

    return Vimmers;

  })();

  vimmers = new Vimmers;

}).call(this);
